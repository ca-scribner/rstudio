/* UserPrefsAccessorConstants.java
 *
 * Copyright (C) 2021 by RStudio, PBC
 *
 * Unless you have received this program directly from RStudio pursuant
 * to the terms of a commercial license agreement with RStudio, then
 * this program is licensed to you under the terms of version 3 of the
 * GNU Affero General Public License. This program is distributed WITHOUT
 * ANY EXPRESS OR IMPLIED WARRANTY, INCLUDING THOSE OF NON-INFRINGEMENT,
 * MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. Please refer to the
 * AGPL (http://www.gnu.org/licenses/agpl-3.0.txt) for more details.
 *
 */

/* DO NOT HAND-EDIT! This file is automatically generated from the formal user preference schema
 * JSON. To add a preference, add it to "user-prefs-schema.json", then run "generate-prefs.R" to
 * rebuild this file.
 */

package org.rstudio.studio.client.workbench.prefs.model;
import com.google.gwt.i18n.client.Constants;

public interface UserPrefsAccessorConstants extends Constants {

   /**
    * Whether to run .Rprofile again after resuming a suspended R session.
    */
   @DefaultStringValue("@dRun .Rprofile on resume")
   String runRprofileOnResumeTitle();
   @DefaultStringValue("@dWhether to run .Rprofile again after resuming a suspended R session.")
   String runRprofileOnResumeDescription();

   /**
    * Whether to save the workspace to an .Rdata file after the R session ends.
    */
   @DefaultStringValue("@dSave workspace on quit")
   String saveWorkspaceTitle();
   @DefaultStringValue("@dWhether to save the workspace to an .Rdata file after the R session ends.")
   String saveWorkspaceDescription();

   /**
    * Whether to load the workspace when the R session begins.
    */
   @DefaultStringValue("@dLoad workspace on start")
   String loadWorkspaceTitle();
   @DefaultStringValue("@dWhether to load the workspace when the R session begins.")
   String loadWorkspaceDescription();

   /**
    * The initial working directory for new R sessions.
    */
   @DefaultStringValue("@dInitial working directory")
   String initialWorkingDirectoryTitle();
   @DefaultStringValue("@dThe initial working directory for new R sessions.")
   String initialWorkingDirectoryDescription();

   /**
    * The CRAN mirror to use.
    */
   @DefaultStringValue("@d")
   String cranMirrorTitle();
   @DefaultStringValue("@dThe CRAN mirror to use.")
   String cranMirrorDescription();

   /**
    * The name of the default Bioconductor mirror.
    */
   @DefaultStringValue("@d")
   String bioconductorMirrorNameTitle();
   @DefaultStringValue("@dThe name of the default Bioconductor mirror.")
   String bioconductorMirrorNameDescription();

   /**
    * The URL of the default Bioconductor mirror.
    */
   @DefaultStringValue("@d")
   String bioconductorMirrorUrlTitle();
   @DefaultStringValue("@dThe URL of the default Bioconductor mirror.")
   String bioconductorMirrorUrlDescription();

   /**
    * Whether to always save the R console history.
    */
   @DefaultStringValue("@dSave R console history")
   String alwaysSaveHistoryTitle();
   @DefaultStringValue("@dWhether to always save the R console history.")
   String alwaysSaveHistoryDescription();

   /**
    * Whether to remove duplicate entries from the R console history.
    */
   @DefaultStringValue("@dRemove duplicates from console history")
   String removeHistoryDuplicatesTitle();
   @DefaultStringValue("@dWhether to remove duplicate entries from the R console history.")
   String removeHistoryDuplicatesDescription();

   /**
    * Show the result of the last expression (.Last.value) in the Environment pane.
    */
   @DefaultStringValue("@dShow .Last.value in Environment pane")
   String showLastDotValueTitle();
   @DefaultStringValue("@dShow the result of the last expression (.Last.value) in the Environment pane.")
   String showLastDotValueDescription();

   /**
    * The line ending format to use when saving files.
    */
   @DefaultStringValue("@dLine ending format")
   String lineEndingConversionTitle();
   @DefaultStringValue("@dThe line ending format to use when saving files.")
   String lineEndingConversionDescription();

   /**
    * Whether to use newlines when saving Makefiles.
    */
   @DefaultStringValue("@dUse newlines in Makefiles")
   String useNewlinesInMakefilesTitle();
   @DefaultStringValue("@dWhether to use newlines when saving Makefiles.")
   String useNewlinesInMakefilesDescription();

   /**
    * The terminal shell to use on Windows.
    */
   @DefaultStringValue("@d")
   String windowsTerminalShellTitle();
   @DefaultStringValue("@dThe terminal shell to use on Windows.")
   String windowsTerminalShellDescription();

   /**
    * The terminal shell to use on POSIX operating systems (MacOS and Linux).
    */
   @DefaultStringValue("@d")
   String posixTerminalShellTitle();
   @DefaultStringValue("@dThe terminal shell to use on POSIX operating systems (MacOS and Linux).")
   String posixTerminalShellDescription();

   /**
    * The fully qualified path to the custom shell command to use in the Terminal tab.
    */
   @DefaultStringValue("@d")
   String customShellCommandTitle();
   @DefaultStringValue("@dThe fully qualified path to the custom shell command to use in the Terminal tab.")
   String customShellCommandDescription();

   /**
    * The command-line options to pass to the custom shell command.
    */
   @DefaultStringValue("@d")
   String customShellOptionsTitle();
   @DefaultStringValue("@dThe command-line options to pass to the custom shell command.")
   String customShellOptionsDescription();

   /**
    * Show line numbers in RStudio's code editor.
    */
   @DefaultStringValue("@dShow line numbers in editor")
   String showLineNumbersTitle();
   @DefaultStringValue("@dShow line numbers in RStudio's code editor.")
   String showLineNumbersDescription();

   /**
    * Highlight the selected word in RStudio's code editor.
    */
   @DefaultStringValue("@dHighlight selected word in editor")
   String highlightSelectedWordTitle();
   @DefaultStringValue("@dHighlight the selected word in RStudio's code editor.")
   String highlightSelectedWordDescription();

   /**
    * Highlight the selected line in RStudio's code editor.
    */
   @DefaultStringValue("@dHighlight selected line in editor")
   String highlightSelectedLineTitle();
   @DefaultStringValue("@dHighlight the selected line in RStudio's code editor.")
   String highlightSelectedLineDescription();

   /**
    * Layout of panes in the RStudio workbench.
    */
   @DefaultStringValue("@d")
   String panesTitle();
   @DefaultStringValue("@dLayout of panes in the RStudio workbench.")
   String panesDescription();

   /**
    * Whether to enable the ability to add source columns to display.
    */
   @DefaultStringValue("@dAllow source columns")
   String allowSourceColumnsTitle();
   @DefaultStringValue("@dWhether to enable the ability to add source columns to display.")
   String allowSourceColumnsDescription();

   /**
    * Whether to insert spaces when pressing the Tab key.
    */
   @DefaultStringValue("@dInsert spaces for Tab")
   String useSpacesForTabTitle();
   @DefaultStringValue("@dWhether to insert spaces when pressing the Tab key.")
   String useSpacesForTabDescription();

   /**
    * The number of spaces to insert when pressing the Tab key.
    */
   @DefaultStringValue("@dNumber of spaces for Tab")
   String numSpacesForTabTitle();
   @DefaultStringValue("@dThe number of spaces to insert when pressing the Tab key.")
   String numSpacesForTabDescription();

   /**
    * When enabled, the indentation for documents not part of an RStudio project will be automatically detected.
    */
   @DefaultStringValue("@dAutodetect indentation in files")
   String autoDetectIndentationTitle();
   @DefaultStringValue("@dWhen enabled, the indentation for documents not part of an RStudio project will be automatically detected.")
   String autoDetectIndentationDescription();

   /**
    * Whether to show the margin guide in the RStudio code editor.
    */
   @DefaultStringValue("@dShow margin in editor")
   String showMarginTitle();
   @DefaultStringValue("@dWhether to show the margin guide in the RStudio code editor.")
   String showMarginDescription();

   /**
    * Whether to flash the cursor off and on.
    */
   @DefaultStringValue("@dUse a blinking cursor")
   String blinkingCursorTitle();
   @DefaultStringValue("@dWhether to flash the cursor off and on.")
   String blinkingCursorDescription();

   /**
    * The number of columns of text after which the margin is shown.
    */
   @DefaultStringValue("@dMargin column")
   String marginColumnTitle();
   @DefaultStringValue("@dThe number of columns of text after which the margin is shown.")
   String marginColumnDescription();

   /**
    * Whether to show invisible characters, such as spaces and tabs, in the RStudio code editor.
    */
   @DefaultStringValue("@dShow invisible characters in editor")
   String showInvisiblesTitle();
   @DefaultStringValue("@dWhether to show invisible characters, such as spaces and tabs, in the RStudio code editor.")
   String showInvisiblesDescription();

   /**
    * Whether to show indentation guides in the RStudio code editor.
    */
   @DefaultStringValue("@dShow indentation guides")
   String showIndentGuidesTitle();
   @DefaultStringValue("@dWhether to show indentation guides in the RStudio code editor.")
   String showIndentGuidesDescription();

   /**
    * Whether to continue comments (by inserting the comment character) after adding a new line.  Press Shift + Enter to exit a comment.
    */
   @DefaultStringValue("@dContinue comments after adding new line")
   String continueCommentsOnNewlineTitle();
   @DefaultStringValue("@dWhether to continue comments (by inserting the comment character) after adding a new line.  Press Shift + Enter to exit a comment.")
   String continueCommentsOnNewlineDescription();

   /**
    * Hyperlinks in comments will be underlined and clickable
    */
   @DefaultStringValue("@dHyperlinks in comments will be underlined and clickable")
   String highlightWebLinkTitle();
   @DefaultStringValue("@dHyperlinks in comments will be underlined and clickable")
   String highlightWebLinkDescription();

   /**
    * The keybindings to use in the RStudio code editor.
    */
   @DefaultStringValue("@dKeybinding set for editor")
   String editorKeybindingsTitle();
   @DefaultStringValue("@dThe keybindings to use in the RStudio code editor.")
   String editorKeybindingsDescription();
   @DefaultStringValue("@dDefault")
   String editorKeybindingsEnum_default();
   @DefaultStringValue("@dVim")
   String editorKeybindingsEnum_vim();
   @DefaultStringValue("@dEmacs")
   String editorKeybindingsEnum_emacs();
   @DefaultStringValue("@dSublime Text")
   String editorKeybindingsEnum_sublime();

   /**
    * Whether to insert matching pairs, such as () and [], when the first is typed.
    */
   @DefaultStringValue("@dAuto-insert matching parentheses and brackets")
   String insertMatchingTitle();
   @DefaultStringValue("@dWhether to insert matching pairs, such as () and [], when the first is typed.")
   String insertMatchingDescription();

   /**
    * Whether to insert spaces around the equals sign in R code.
    */
   @DefaultStringValue("@dInsert spaces around = in R code")
   String insertSpacesAroundEqualsTitle();
   @DefaultStringValue("@dWhether to insert spaces around the equals sign in R code.")
   String insertSpacesAroundEqualsDescription();

   /**
    * Whether to insert parentheses after function completions.
    */
   @DefaultStringValue("@dInsert parentheses after functions")
   String insertParensAfterFunctionCompletionTitle();
   @DefaultStringValue("@dWhether to insert parentheses after function completions.")
   String insertParensAfterFunctionCompletionDescription();

   /**
    * Whether to attempt completion of multiple-line statements when pressing Tab.
    */
   @DefaultStringValue("@dComplete multi-line statements with Tab")
   String tabMultilineCompletionTitle();
   @DefaultStringValue("@dWhether to attempt completion of multiple-line statements when pressing Tab.")
   String tabMultilineCompletionDescription();

   /**
    * Whether to attempt completion of statements when pressing Tab.
    */
   @DefaultStringValue("@dUse Tab to trigger autocompletion")
   String tabCompletionTitle();
   @DefaultStringValue("@dWhether to attempt completion of statements when pressing Tab.")
   String tabCompletionDescription();

   /**
    * Whether to show help tooltips for functions when the cursor has not been recently moved.
    */
   @DefaultStringValue("@dShow function help tooltips on idle")
   String showHelpTooltipOnIdleTitle();
   @DefaultStringValue("@dWhether to show help tooltips for functions when the cursor has not been recently moved.")
   String showHelpTooltipOnIdleDescription();

   /**
    * Which kinds of delimiters can be used to surround the current selection.
    */
   @DefaultStringValue("@dSurround selections with delimiter insertion")
   String surroundSelectionTitle();
   @DefaultStringValue("@dWhich kinds of delimiters can be used to surround the current selection.")
   String surroundSelectionDescription();
   @DefaultStringValue("@dNever")
   String surroundSelectionEnum_never();
   @DefaultStringValue("@dQuotes")
   String surroundSelectionEnum_quotes();
   @DefaultStringValue("@dQuotes & Brackets")
   String surroundSelectionEnum_quotes_and_brackets();

   /**
    * Whether to enable code snippets in the RStudio code editor.
    */
   @DefaultStringValue("@dEnable code snippets")
   String enableSnippetsTitle();
   @DefaultStringValue("@dWhether to enable code snippets in the RStudio code editor.")
   String enableSnippetsDescription();

   /**
    * When to use auto-completion for R code in the RStudio code editor.
    */
   @DefaultStringValue("@dUse code completion for R")
   String codeCompletionTitle();
   @DefaultStringValue("@dWhen to use auto-completion for R code in the RStudio code editor.")
   String codeCompletionDescription();
   @DefaultStringValue("@dAutomatically")
   String codeCompletionEnum_always();
   @DefaultStringValue("@dNever")
   String codeCompletionEnum_never();
   @DefaultStringValue("@dWhen triggered ($, ::)")
   String codeCompletionEnum_triggered();
   @DefaultStringValue("@dManually (tab)")
   String codeCompletionEnum_manual();

   /**
    * When to use auto-completion for other languages (such as JavaScript and SQL) in the RStudio code editor.
    */
   @DefaultStringValue("@dUse code completion for other languages")
   String codeCompletionOtherTitle();
   @DefaultStringValue("@dWhen to use auto-completion for other languages (such as JavaScript and SQL) in the RStudio code editor.")
   String codeCompletionOtherDescription();
   @DefaultStringValue("@dAutomatically")
   String codeCompletionOtherEnum_always();
   @DefaultStringValue("@dWhen triggered")
   String codeCompletionOtherEnum_triggered();
   @DefaultStringValue("@dManually (ctrl+space)")
   String codeCompletionOtherEnum_manual();

   /**
    * Whether to always use code completion in the R console.
    */
   @DefaultStringValue("@dUse code completion in the R console")
   String consoleCodeCompletionTitle();
   @DefaultStringValue("@dWhether to always use code completion in the R console.")
   String consoleCodeCompletionDescription();

   /**
    * The number of milliseconds to wait before offering code suggestions.
    */
   @DefaultStringValue("@dDelay before completing code (ms)")
   String codeCompletionDelayTitle();
   @DefaultStringValue("@dThe number of milliseconds to wait before offering code suggestions.")
   String codeCompletionDelayDescription();

   /**
    * The number of characters in a symbol that can be entered before completions are offered.
    */
   @DefaultStringValue("@dNumber of characters for code completion")
   String codeCompletionCharactersTitle();
   @DefaultStringValue("@dThe number of characters in a symbol that can be entered before completions are offered.")
   String codeCompletionCharactersDescription();

   /**
    * Whether to show function signature tooltips during autocompletion.
    */
   @DefaultStringValue("@dShow function signature tooltips")
   String showFunctionSignatureTooltipsTitle();
   @DefaultStringValue("@dWhether to show function signature tooltips during autocompletion.")
   String showFunctionSignatureTooltipsDescription();

   /**
    * Whether to show diagnostic messages (such as syntax and usage errors) for R code as you type.
    */
   @DefaultStringValue("@dShow diagnostics in R code")
   String showDiagnosticsRTitle();
   @DefaultStringValue("@dWhether to show diagnostic messages (such as syntax and usage errors) for R code as you type.")
   String showDiagnosticsRDescription();

   /**
    * Whether to show diagnostic messages for C++ code as you type.
    */
   @DefaultStringValue("@dShow diagnostics in C++ code")
   String showDiagnosticsCppTitle();
   @DefaultStringValue("@dWhether to show diagnostic messages for C++ code as you type.")
   String showDiagnosticsCppDescription();

   /**
    * Whether to show diagnostic messages for other types of code (not R or C++).
    */
   @DefaultStringValue("@dShow diagnostics in other languages")
   String showDiagnosticsOtherTitle();
   @DefaultStringValue("@dWhether to show diagnostic messages for other types of code (not R or C++).")
   String showDiagnosticsOtherDescription();

   /**
    * Whether to show style diagnostics (suggestions for improving R code style)
    */
   @DefaultStringValue("@dShow style diagnostics for R code")
   String styleDiagnosticsTitle();
   @DefaultStringValue("@dWhether to show style diagnostics (suggestions for improving R code style)")
   String styleDiagnosticsDescription();

   /**
    * Whether to check code for problems after saving it.
    */
   @DefaultStringValue("@dCheck code for problems when saving")
   String diagnosticsOnSaveTitle();
   @DefaultStringValue("@dWhether to check code for problems after saving it.")
   String diagnosticsOnSaveDescription();

   /**
    * Whether to run code diagnostics in the background, as you type.
    */
   @DefaultStringValue("@dRun R code diagnostics in the background")
   String backgroundDiagnosticsTitle();
   @DefaultStringValue("@dWhether to run code diagnostics in the background, as you type.")
   String backgroundDiagnosticsDescription();

   /**
    * The number of milliseconds to delay before running code diagnostics in the background.
    */
   @DefaultStringValue("@dRun R code diagnostics after (ms)")
   String backgroundDiagnosticsDelayMsTitle();
   @DefaultStringValue("@dThe number of milliseconds to delay before running code diagnostics in the background.")
   String backgroundDiagnosticsDelayMsDescription();

   /**
    * Whether to run diagnostics in R function calls.
    */
   @DefaultStringValue("@dRun diagnostics on R function calls")
   String diagnosticsInRFunctionCallsTitle();
   @DefaultStringValue("@dWhether to run diagnostics in R function calls.")
   String diagnosticsInRFunctionCallsDescription();

   /**
    * Whether to check arguments to R function calls.
    */
   @DefaultStringValue("@dCheck arguments to R function calls")
   String checkArgumentsToRFunctionCallsTitle();
   @DefaultStringValue("@dWhether to check arguments to R function calls.")
   String checkArgumentsToRFunctionCallsDescription();

   /**
    * Whether to check for unexpected variable assignments inside R function calls.
    */
   @DefaultStringValue("@dCheck for unexpected assignments")
   String checkUnexpectedAssignmentInFunctionCallTitle();
   @DefaultStringValue("@dWhether to check for unexpected variable assignments inside R function calls.")
   String checkUnexpectedAssignmentInFunctionCallDescription();

   /**
    * Whether to generate a warning if a variable is used without being defined in the current scope.
    */
   @DefaultStringValue("@dWarn when R variable used but not defined")
   String warnIfNoSuchVariableInScopeTitle();
   @DefaultStringValue("@dWhether to generate a warning if a variable is used without being defined in the current scope.")
   String warnIfNoSuchVariableInScopeDescription();

   /**
    * Whether to generate a warning if a variable is defined without being used in the current scope
    */
   @DefaultStringValue("@dWarn when R variable defined but not used")
   String warnVariableDefinedButNotUsedTitle();
   @DefaultStringValue("@dWhether to generate a warning if a variable is defined without being used in the current scope")
   String warnVariableDefinedButNotUsedDescription();

   /**
    * Whether to automatically discover and offer to install missing R package dependencies.
    */
   @DefaultStringValue("@dDetect missing R packages in the editor")
   String autoDiscoverPackageDependenciesTitle();
   @DefaultStringValue("@dWhether to automatically discover and offer to install missing R package dependencies.")
   String autoDiscoverPackageDependenciesDescription();

   /**
    * Whether to ensure that source files end with a newline character.
    */
   @DefaultStringValue("@dEnsure files end with a newline when saving")
   String autoAppendNewlineTitle();
   @DefaultStringValue("@dWhether to ensure that source files end with a newline character.")
   String autoAppendNewlineDescription();

   /**
    * Whether to strip trailing whitespace from each line when saving.
    */
   @DefaultStringValue("@dStrip trailing whitespace when saving")
   String stripTrailingWhitespaceTitle();
   @DefaultStringValue("@dWhether to strip trailing whitespace from each line when saving.")
   String stripTrailingWhitespaceDescription();

   /**
    * Whether to save the position of the cursor when a file is closed, restore it when the file is opened.
    */
   @DefaultStringValue("@dRestore cursor position when reopening files")
   String restoreSourceDocumentCursorPositionTitle();
   @DefaultStringValue("@dWhether to save the position of the cursor when a file is closed, restore it when the file is opened.")
   String restoreSourceDocumentCursorPositionDescription();

   /**
    * Whether to automatically re-indent code when it's pasted into RStudio.
    */
   @DefaultStringValue("@dRe-indent code when pasting")
   String reindentOnPasteTitle();
   @DefaultStringValue("@dWhether to automatically re-indent code when it's pasted into RStudio.")
   String reindentOnPasteDescription();

   /**
    * Whether to vertically align arguments to R function calls during automatic indentation.
    */
   @DefaultStringValue("@dVertically align function arguments")
   String verticallyAlignArgumentsIndentTitle();
   @DefaultStringValue("@dWhether to vertically align arguments to R function calls during automatic indentation.")
   String verticallyAlignArgumentsIndentDescription();

   /**
    * Whether to soft-wrap R source files, wrapping the text for display without inserting newline characters.
    */
   @DefaultStringValue("@dSoft-wrap R source files")
   String softWrapRFilesTitle();
   @DefaultStringValue("@dWhether to soft-wrap R source files, wrapping the text for display without inserting newline characters.")
   String softWrapRFilesDescription();

   /**
    * Whether to soft-wrap R Markdown files (and similar types such as R HTML and R Notebooks)
    */
   @DefaultStringValue("@dSoft-wrap R Markdown files")
   String softWrapRmdFilesTitle();
   @DefaultStringValue("@dWhether to soft-wrap R Markdown files (and similar types such as R HTML and R Notebooks)")
   String softWrapRmdFilesDescription();

   /**
    * Whether to focus the R console after executing an R command from a script.
    */
   @DefaultStringValue("@dFocus console after executing R code")
   String focusConsoleAfterExecTitle();
   @DefaultStringValue("@dWhether to focus the R console after executing an R command from a script.")
   String focusConsoleAfterExecDescription();

   /**
    * The style of folding to use.
    */
   @DefaultStringValue("@dFold style in editor")
   String foldStyleTitle();
   @DefaultStringValue("@dThe style of folding to use.")
   String foldStyleDescription();
   @DefaultStringValue("@dStart Only")
   String foldStyleEnum_begin_only();
   @DefaultStringValue("@dStart and End")
   String foldStyleEnum_begin_and_end();

   /**
    * Whether to automatically save scripts before executing them.
    */
   @DefaultStringValue("@dSave R scripts before sourcing")
   String saveBeforeSourcingTitle();
   @DefaultStringValue("@dWhether to automatically save scripts before executing them.")
   String saveBeforeSourcingDescription();

   /**
    * Whether to use syntax highlighting in the R console.
    */
   @DefaultStringValue("@dSyntax highlighting in R console")
   String syntaxColorConsoleTitle();
   @DefaultStringValue("@dWhether to use syntax highlighting in the R console.")
   String syntaxColorConsoleDescription();

   /**
    * Whether to display error, warning, and message output in a different color.
    */
   @DefaultStringValue("@dDifferent color for error output in R console")
   String highlightConsoleErrorsTitle();
   @DefaultStringValue("@dWhether to display error, warning, and message output in a different color.")
   String highlightConsoleErrorsDescription();

   /**
    * Whether to allow scrolling past the end of a file.
    */
   @DefaultStringValue("@dScroll past end of file")
   String scrollPastEndOfDocumentTitle();
   @DefaultStringValue("@dWhether to allow scrolling past the end of a file.")
   String scrollPastEndOfDocumentDescription();

   /**
    * Whether to highlight R function calls in the code editor.
    */
   @DefaultStringValue("@dHighlight R function calls")
   String highlightRFunctionCallsTitle();
   @DefaultStringValue("@dWhether to highlight R function calls in the code editor.")
   String highlightRFunctionCallsDescription();

   /**
    * Whether to highlight parentheses in a variety of colors.
    */
   @DefaultStringValue("@dRainbow parentheses")
   String rainbowParenthesesTitle();
   @DefaultStringValue("@dWhether to highlight parentheses in a variety of colors.")
   String rainbowParenthesesDescription();

   /**
    * The maximum number of characters to display in a single line in the R console.
    */
   @DefaultStringValue("@dMaximum characters per line in R console")
   String consoleLineLengthLimitTitle();
   @DefaultStringValue("@dThe maximum number of characters to display in a single line in the R console.")
   String consoleLineLengthLimitDescription();

   /**
    * The maximum number of console actions to store and display in the console scrollback buffer.
    */
   @DefaultStringValue("@dMaximum lines in R console")
   String consoleMaxLinesTitle();
   @DefaultStringValue("@dThe maximum number of console actions to store and display in the console scrollback buffer.")
   String consoleMaxLinesDescription();

   /**
    * How to treat ANSI escape codes in the console.
    */
   @DefaultStringValue("@dANSI escape codes in R console")
   String ansiConsoleModeTitle();
   @DefaultStringValue("@dHow to treat ANSI escape codes in the console.")
   String ansiConsoleModeDescription();

   /**
    * Whether to only show a limited window of the total console output
    */
   @DefaultStringValue("@dLimit visible console output")
   String limitVisibleConsoleTitle();
   @DefaultStringValue("@dWhether to only show a limited window of the total console output")
   String limitVisibleConsoleDescription();

   /**
    * Whether to show a toolbar on code chunks in R Markdown documents.
    */
   @DefaultStringValue("@dShow toolbar on R Markdown chunks")
   String showInlineToolbarForRCodeChunksTitle();
   @DefaultStringValue("@dWhether to show a toolbar on code chunks in R Markdown documents.")
   String showInlineToolbarForRCodeChunksDescription();

   /**
    * Whether to highlight code chunks in R Markdown documents with a different background color.
    */
   @DefaultStringValue("@dHighlight code chunks in R Markdown files")
   String highlightCodeChunksTitle();
   @DefaultStringValue("@dWhether to highlight code chunks in R Markdown documents with a different background color.")
   String highlightCodeChunksDescription();

   /**
    * Whether to save all open, unsaved files before building the project.
    */
   @DefaultStringValue("@dSave files before building")
   String saveFilesBeforeBuildTitle();
   @DefaultStringValue("@dWhether to save all open, unsaved files before building the project.")
   String saveFilesBeforeBuildDescription();

   /**
    * The default editor font size, in points.
    */
   @DefaultStringValue("@dEditor font size (points)")
   String fontSizePointsTitle();
   @DefaultStringValue("@dThe default editor font size, in points.")
   String fontSizePointsDescription();

   /**
    * The help panel font size, in points.
    */
   @DefaultStringValue("@dHelp panel font size (points)")
   String helpFontSizePointsTitle();
   @DefaultStringValue("@dThe help panel font size, in points.")
   String helpFontSizePointsDescription();

   /**
    * The name of the color theme to apply to the text editor in RStudio.
    */
   @DefaultStringValue("@dTheme")
   String editorThemeTitle();
   @DefaultStringValue("@dThe name of the color theme to apply to the text editor in RStudio.")
   String editorThemeDescription();

   /**
    * Whether to use a custom editor font in RStudio Server.
    */
   @DefaultStringValue("@dEnable editor fonts on RStudio Server")
   String serverEditorFontEnabledTitle();
   @DefaultStringValue("@dWhether to use a custom editor font in RStudio Server.")
   String serverEditorFontEnabledDescription();

   /**
    * The name of the fixed-width editor font to use with RStudio Server.
    */
   @DefaultStringValue("@dEditor font")
   String serverEditorFontTitle();
   @DefaultStringValue("@dThe name of the fixed-width editor font to use with RStudio Server.")
   String serverEditorFontDescription();

   /**
    * The default character encoding to use when saving files.
    */
   @DefaultStringValue("@dDefault character encoding")
   String defaultEncodingTitle();
   @DefaultStringValue("@dThe default character encoding to use when saving files.")
   String defaultEncodingDescription();

   /**
    * Whether to show the toolbar at the top of the RStudio workbench.
    */
   @DefaultStringValue("@dShow top toolbar")
   String toolbarVisibleTitle();
   @DefaultStringValue("@dWhether to show the toolbar at the top of the RStudio workbench.")
   String toolbarVisibleDescription();

   /**
    * The directory path under which to place new projects by default.
    */
   @DefaultStringValue("@dDefault new project location")
   String defaultProjectLocationTitle();
   @DefaultStringValue("@dThe directory path under which to place new projects by default.")
   String defaultProjectLocationDescription();

   /**
    * Whether to echo R code when sourcing it.
    */
   @DefaultStringValue("@dSource with echo by default")
   String sourceWithEchoTitle();
   @DefaultStringValue("@dWhether to echo R code when sourcing it.")
   String sourceWithEchoDescription();

   /**
    * Whether to initialize new projects with a Git repo by default.
    */
   @DefaultStringValue("@dInitialize new projects with Git")
   String newProjectGitInitTitle();
   @DefaultStringValue("@dWhether to initialize new projects with a Git repo by default.")
   String newProjectGitInitDescription();

   /**
    * The default engine to use when processing Sweave documents.
    */
   @DefaultStringValue("@dDefault Sweave engine")
   String defaultSweaveEngineTitle();
   @DefaultStringValue("@dThe default engine to use when processing Sweave documents.")
   String defaultSweaveEngineDescription();

   /**
    * The default program to use when processing LaTeX documents.
    */
   @DefaultStringValue("@dDefault LaTeX program")
   String defaultLatexProgramTitle();
   @DefaultStringValue("@dThe default program to use when processing LaTeX documents.")
   String defaultLatexProgramDescription();

   /**
    * Whether to use Roxygen for documentation.
    */
   @DefaultStringValue("@dUse Roxygen for documentation")
   String useRoxygenTitle();
   @DefaultStringValue("@dWhether to use Roxygen for documentation.")
   String useRoxygenDescription();

   /**
    * Whether to use RStudio's data import feature.
    */
   @DefaultStringValue("@dEnable data import")
   String useDataimportTitle();
   @DefaultStringValue("@dWhether to use RStudio's data import feature.")
   String useDataimportDescription();

   /**
    * The program to use to preview PDF files after generation.
    */
   @DefaultStringValue("@dPDF previewer")
   String pdfPreviewerTitle();
   @DefaultStringValue("@dThe program to use to preview PDF files after generation.")
   String pdfPreviewerDescription();

   /**
    * Whether to always enable the concordance for RNW files.
    */
   @DefaultStringValue("@dEnable Rnw concordance")
   String alwaysEnableRnwConcordanceTitle();
   @DefaultStringValue("@dWhether to always enable the concordance for RNW files.")
   String alwaysEnableRnwConcordanceDescription();

   /**
    * Whether to insert numbered sections in LaTeX.
    */
   @DefaultStringValue("@dInsert numbered LaTeX sections")
   String insertNumberedLatexSectionsTitle();
   @DefaultStringValue("@dWhether to insert numbered sections in LaTeX.")
   String insertNumberedLatexSectionsDescription();

   /**
    * The language of the spelling dictionary to use for spell checking.
    */
   @DefaultStringValue("@dSpelling dictionary language")
   String spellingDictionaryLanguageTitle();
   @DefaultStringValue("@dThe language of the spelling dictionary to use for spell checking.")
   String spellingDictionaryLanguageDescription();

   /**
    * The list of custom dictionaries to use when spell checking.
    */
   @DefaultStringValue("@dCustom spelling dictionaries")
   String spellingCustomDictionariesTitle();
   @DefaultStringValue("@dThe list of custom dictionaries to use when spell checking.")
   String spellingCustomDictionariesDescription();

   /**
    * The number of milliseconds to wait before linting a document after it is loaded.
    */
   @DefaultStringValue("@dLint document after load (ms)")
   String documentLoadLintDelayTitle();
   @DefaultStringValue("@dThe number of milliseconds to wait before linting a document after it is loaded.")
   String documentLoadLintDelayDescription();

   /**
    * Whether to ignore words in uppercase when spell checking.
    */
   @DefaultStringValue("@dIgnore uppercase words in spell check")
   String ignoreUppercaseWordsTitle();
   @DefaultStringValue("@dWhether to ignore words in uppercase when spell checking.")
   String ignoreUppercaseWordsDescription();

   /**
    * Whether to ignore words with numbers in them when spell checking.
    */
   @DefaultStringValue("@dIgnore words with numbers in spell check")
   String ignoreWordsWithNumbersTitle();
   @DefaultStringValue("@dWhether to ignore words with numbers in them when spell checking.")
   String ignoreWordsWithNumbersDescription();

   /**
    * The maximum number of spelling words to check at once.
    */
   @DefaultStringValue("@dMaximum number of words to spell check")
   String maxSpellcheckWordsTitle();
   @DefaultStringValue("@dThe maximum number of spelling words to check at once.")
   String maxSpellcheckWordsDescription();

   /**
    * The maximum number of spelling correction suggestions to prefetch.
    */
   @DefaultStringValue("@dNumber of words to prefetch for spell check")
   String maxSpellcheckPrefetchTitle();
   @DefaultStringValue("@dThe maximum number of spelling correction suggestions to prefetch.")
   String maxSpellcheckPrefetchDescription();

   /**
    * Whether to enable real-time spellchecking by default.
    */
   @DefaultStringValue("@dUse real-time spellchecking")
   String realTimeSpellcheckingTitle();
   @DefaultStringValue("@dWhether to enable real-time spellchecking by default.")
   String realTimeSpellcheckingDescription();

   /**
    * Whether to navigate to build errors.
    */
   @DefaultStringValue("@dNavigate to build errors")
   String navigateToBuildErrorTitle();
   @DefaultStringValue("@dWhether to navigate to build errors.")
   String navigateToBuildErrorDescription();

   /**
    * Whether to enable RStudio's Packages pane.
    */
   @DefaultStringValue("@dEnable the Packages pane")
   String packagesPaneEnabledTitle();
   @DefaultStringValue("@dWhether to enable RStudio's Packages pane.")
   String packagesPaneEnabledDescription();

   /**
    * Whether to use RCPP templates.
    */
   @DefaultStringValue("@dUse RCpp file templates")
   String useRcppTemplateTitle();
   @DefaultStringValue("@dWhether to use RCPP templates.")
   String useRcppTemplateDescription();

   /**
    * Whether to restore the last opened source documents when RStudio starts up.
    */
   @DefaultStringValue("@dRestore last opened documents on startup")
   String restoreSourceDocumentsTitle();
   @DefaultStringValue("@dWhether to restore the last opened source documents when RStudio starts up.")
   String restoreSourceDocumentsDescription();

   /**
    * Whether to handle errors only when user code is on the stack.
    */
   @DefaultStringValue("@dHandle errors only when user code present")
   String handleErrorsInUserCodeOnlyTitle();
   @DefaultStringValue("@dWhether to handle errors only when user code is on the stack.")
   String handleErrorsInUserCodeOnlyDescription();

   /**
    * Whether to automatically expand tracebacks when an error occurs.
    */
   @DefaultStringValue("@dAuto-expand error tracebacks")
   String autoExpandErrorTracebacksTitle();
   @DefaultStringValue("@dWhether to automatically expand tracebacks when an error occurs.")
   String autoExpandErrorTracebacksDescription();

   /**
    * Whether to check for new versions of RStudio when RStudio starts.
    */
   @DefaultStringValue("@dCheck for new version at startup")
   String checkForUpdatesTitle();
   @DefaultStringValue("@dWhether to check for new versions of RStudio when RStudio starts.")
   String checkForUpdatesDescription();

   /**
    * Whether to show functions without source references in the Traceback pane while debugging.
    */
   @DefaultStringValue("@dShow internal functions when debugging")
   String showInternalFunctionsTitle();
   @DefaultStringValue("@dWhether to show functions without source references in the Traceback pane while debugging.")
   String showInternalFunctionsDescription();

   /**
    * Where to display Shiny applications when they are run.
    */
   @DefaultStringValue("@dRun Shiny applications in")
   String shinyViewerTypeTitle();
   @DefaultStringValue("@dWhere to display Shiny applications when they are run.")
   String shinyViewerTypeDescription();

   /**
    * Whether to run Shiny applications as background jobs.
    */
   @DefaultStringValue("@dRun Shiny applications in the background")
   String shinyBackgroundJobsTitle();
   @DefaultStringValue("@dWhether to run Shiny applications as background jobs.")
   String shinyBackgroundJobsDescription();

   /**
    * Where to display Shiny applications when they are run.
    */
   @DefaultStringValue("@dRun Plumber APIs in")
   String plumberViewerTypeTitle();
   @DefaultStringValue("@dWhere to display Shiny applications when they are run.")
   String plumberViewerTypeDescription();

   /**
    * The default name to use as the document author when creating new documents.
    */
   @DefaultStringValue("@dDocument author")
   String documentAuthorTitle();
   @DefaultStringValue("@dThe default name to use as the document author when creating new documents.")
   String documentAuthorDescription();

   /**
    * The path to the preferred R Markdown template.
    */
   @DefaultStringValue("@dPath to preferred R Markdown template")
   String rmdPreferredTemplatePathTitle();
   @DefaultStringValue("@dThe path to the preferred R Markdown template.")
   String rmdPreferredTemplatePathDescription();

   /**
    * Where to display R Markdown documents when they have completed rendering.
    */
   @DefaultStringValue("@dDisplay R Markdown documents in")
   String rmdViewerTypeTitle();
   @DefaultStringValue("@dWhere to display R Markdown documents when they have completed rendering.")
   String rmdViewerTypeDescription();

   /**
    * Whether to show verbose diagnostic information when publishing content.
    */
   @DefaultStringValue("@dShow diagnostic info when publishing")
   String showPublishDiagnosticsTitle();
   @DefaultStringValue("@dWhether to show verbose diagnostic information when publishing content.")
   String showPublishDiagnosticsDescription();

   /**
    * Whether to check remote server SSL certificates when publishing content.
    */
   @DefaultStringValue("@dCheck SSL certificates when publishing")
   String publishCheckCertificatesTitle();
   @DefaultStringValue("@dWhether to check remote server SSL certificates when publishing content.")
   String publishCheckCertificatesDescription();

   /**
    * Whether to use a custom certificate authority (CA) bundle when publishing content.
    */
   @DefaultStringValue("@dUse custom CA bundle when publishing")
   String usePublishCaBundleTitle();
   @DefaultStringValue("@dWhether to use a custom certificate authority (CA) bundle when publishing content.")
   String usePublishCaBundleDescription();

   /**
    * The path to the custom certificate authority (CA) bundle to use when publishing content.
    */
   @DefaultStringValue("@dPath to custom CA bundle for publishing")
   String publishCaBundleTitle();
   @DefaultStringValue("@dThe path to the custom certificate authority (CA) bundle to use when publishing content.")
   String publishCaBundleDescription();

   /**
    * Whether to show chunk output inline for ordinary R Markdown documents.
    */
   @DefaultStringValue("@dShow chunk output inline in all documents")
   String rmdChunkOutputInlineTitle();
   @DefaultStringValue("@dWhether to show chunk output inline for ordinary R Markdown documents.")
   String rmdChunkOutputInlineDescription();

   /**
    * Whether to show the document outline by default when opening R Markdown documents.
    */
   @DefaultStringValue("@dOpen document outline by default")
   String showDocOutlineRmdTitle();
   @DefaultStringValue("@dWhether to show the document outline by default when opening R Markdown documents.")
   String showDocOutlineRmdDescription();

   /**
    * Whether to automatically run an R Markdown document's Setup chunk before running other chunks.
    */
   @DefaultStringValue("@dAutomatically run Setup chunk when needed")
   String autoRunSetupChunkTitle();
   @DefaultStringValue("@dWhether to automatically run an R Markdown document's Setup chunk before running other chunks.")
   String autoRunSetupChunkDescription();

   /**
    * Whether to hide the R console when executing inline R Markdown chunks.
    */
   @DefaultStringValue("@dHide console when running R Markdown chunks")
   String hideConsoleOnChunkExecuteTitle();
   @DefaultStringValue("@dWhether to hide the R console when executing inline R Markdown chunks.")
   String hideConsoleOnChunkExecuteDescription();

   /**
    * The unit of R code to execute when the Execute command is invoked.
    */
   @DefaultStringValue("@dUnit of R code execution")
   String executionBehaviorTitle();
   @DefaultStringValue("@dThe unit of R code to execute when the Execute command is invoked.")
   String executionBehaviorDescription();
   @DefaultStringValue("@dCurrent line")
   String executionBehaviorEnum_line();
   @DefaultStringValue("@dMulti-line R statement")
   String executionBehaviorEnum_statement();
   @DefaultStringValue("@dMultiple consecutive R lines")
   String executionBehaviorEnum_paragraph();

   /**
    * Whether to show the Terminal tab.
    */
   @DefaultStringValue("@dShow the Terminal tab")
   String showTerminalTabTitle();
   @DefaultStringValue("@dWhether to show the Terminal tab.")
   String showTerminalTabDescription();

   /**
    * Whether to use local echo in the Terminal.
    */
   @DefaultStringValue("@dUse local echo in the Terminal")
   String terminalLocalEchoTitle();
   @DefaultStringValue("@dWhether to use local echo in the Terminal.")
   String terminalLocalEchoDescription();

   /**
    * Whether to use websockets to communicate with the shell in the Terminal tab.
    */
   @DefaultStringValue("@dUse websockets in the Terminal")
   String terminalWebsocketsTitle();
   @DefaultStringValue("@dWhether to use websockets to communicate with the shell in the Terminal tab.")
   String terminalWebsocketsDescription();

   /**
    * Whether to close the terminal pane after the shell exits.
    */
   @DefaultStringValue("@dClose Terminal pane after shell exit")
   String terminalCloseBehaviorTitle();
   @DefaultStringValue("@dWhether to close the terminal pane after the shell exits.")
   String terminalCloseBehaviorDescription();

   /**
    * Whether to track and save changes to system environment variables in the Terminal.
    */
   @DefaultStringValue("@dSave and restore system environment in Terminal tab")
   String terminalTrackEnvironmentTitle();
   @DefaultStringValue("@dWhether to track and save changes to system environment variables in the Terminal.")
   String terminalTrackEnvironmentDescription();

   /**
    * Terminal bell style
    */
   @DefaultStringValue("@dTerminal bell style")
   String terminalBellStyleTitle();
   @DefaultStringValue("@dTerminal bell style")
   String terminalBellStyleDescription();

   /**
    * Terminal rendering engine: canvas is faster, dom may be needed for some browsers or graphics cards
    */
   @DefaultStringValue("@dTerminal tab rendering engine")
   String terminalRendererTitle();
   @DefaultStringValue("@dTerminal rendering engine: canvas is faster, dom may be needed for some browsers or graphics cards")
   String terminalRendererDescription();

   /**
    * Whether web links displayed in the Terminal tab are made clickable.
    */
   @DefaultStringValue("@dMake links in Terminal clickable")
   String terminalWeblinksTitle();
   @DefaultStringValue("@dWhether web links displayed in the Terminal tab are made clickable.")
   String terminalWeblinksDescription();

   /**
    * Whether to print the render command use to knit R Markdown documents in the R Markdown tab.
    */
   @DefaultStringValue("@dShow R Markdown render command")
   String showRmdRenderCommandTitle();
   @DefaultStringValue("@dWhether to print the render command use to knit R Markdown documents in the R Markdown tab.")
   String showRmdRenderCommandDescription();

   /**
    * Whether to enable moving text on the editing surface by clicking and dragging it.
    */
   @DefaultStringValue("@dEnable dragging text in code editor")
   String enableTextDragTitle();
   @DefaultStringValue("@dWhether to enable moving text on the editing surface by clicking and dragging it.")
   String enableTextDragDescription();

   /**
    * Whether to show hidden files in the Files pane.
    */
   @DefaultStringValue("@dShow hidden files in Files pane")
   String showHiddenFilesTitle();
   @DefaultStringValue("@dWhether to show hidden files in the Files pane.")
   String showHiddenFilesDescription();

   /**
    * List of file names (case sensitive) that are always shown in the Files Pane, regardless of whether hidden files are shown
    */
   @DefaultStringValue("@dFiles always shown in the Files Pane")
   String alwaysShownFilesTitle();
   @DefaultStringValue("@dList of file names (case sensitive) that are always shown in the Files Pane, regardless of whether hidden files are shown")
   String alwaysShownFilesDescription();

   /**
    * List of file extensions (beginning with ., not case sensitive) that are always shown in the Files Pane, regardless of whether hidden files are shown
    */
   @DefaultStringValue("@dExtensions always shown in the Files Pane")
   String alwaysShownExtensionsTitle();
   @DefaultStringValue("@dList of file extensions (beginning with ., not case sensitive) that are always shown in the Files Pane, regardless of whether hidden files are shown")
   String alwaysShownExtensionsDescription();

   /**
    * Whether to sort file names naturally, so that e.g., file10.R comes after file9.R
    */
   @DefaultStringValue("@dSort file names naturally in Files pane")
   String sortFileNamesNaturallyTitle();
   @DefaultStringValue("@dWhether to sort file names naturally, so that e.g., file10.R comes after file9.R")
   String sortFileNamesNaturallyDescription();

   /**
    * The visibility of the Jobs tab.
    */
   @DefaultStringValue("@dJobs tab visibility")
   String jobsTabVisibilityTitle();
   @DefaultStringValue("@dThe visibility of the Jobs tab.")
   String jobsTabVisibilityDescription();

   /**
    * Whether to show the Launcher jobs tab in RStudio Pro and RStudio Workbench.
    */
   @DefaultStringValue("@d")
   String showLauncherJobsTabTitle();
   @DefaultStringValue("@dWhether to show the Launcher jobs tab in RStudio Pro and RStudio Workbench.")
   String showLauncherJobsTabDescription();

   /**
    * How to sort jobs in the Launcher tab in RStudio Pro and RStudio Workbench.
    */
   @DefaultStringValue("@d")
   String launcherJobsSortTitle();
   @DefaultStringValue("@dHow to sort jobs in the Launcher tab in RStudio Pro and RStudio Workbench.")
   String launcherJobsSortDescription();

   /**
    * How to detect busy status in the Terminal.
    */
   @DefaultStringValue("@d")
   String busyDetectionTitle();
   @DefaultStringValue("@dHow to detect busy status in the Terminal.")
   String busyDetectionDescription();

   /**
    * A whitelist of apps that should not be considered busy in the Terminal.
    */
   @DefaultStringValue("@d")
   String busyWhitelistTitle();
   @DefaultStringValue("@dA whitelist of apps that should not be considered busy in the Terminal.")
   String busyWhitelistDescription();

   /**
    * The working directory to use when knitting R Markdown documents.
    */
   @DefaultStringValue("@dWorking directory for knitting")
   String knitWorkingDirTitle();
   @DefaultStringValue("@dThe working directory to use when knitting R Markdown documents.")
   String knitWorkingDirDescription();

   /**
    * Which objects to show in the document outline pane.
    */
   @DefaultStringValue("@dShow in Document Outline")
   String docOutlineShowTitle();
   @DefaultStringValue("@dWhich objects to show in the document outline pane.")
   String docOutlineShowDescription();

   /**
    * When to preview LaTeX mathematical equations when cursor has not moved recently.
    */
   @DefaultStringValue("@dPreview LaTeX equations on idle")
   String latexPreviewOnCursorIdleTitle();
   @DefaultStringValue("@dWhen to preview LaTeX mathematical equations when cursor has not moved recently.")
   String latexPreviewOnCursorIdleDescription();

   /**
    * Whether to wrap around when going to the previous or next editor tab.
    */
   @DefaultStringValue("@dWrap around when going to previous/next tab")
   String wrapTabNavigationTitle();
   @DefaultStringValue("@dWhether to wrap around when going to the previous or next editor tab.")
   String wrapTabNavigationDescription();

   /**
    * The theme to use for the main RStudio user interface.
    */
   @DefaultStringValue("@dGlobal theme")
   String globalThemeTitle();
   @DefaultStringValue("@dThe theme to use for the main RStudio user interface.")
   String globalThemeDescription();

   /**
    * Whether to ignore whitespace when generating diffs of version controlled files.
    */
   @DefaultStringValue("@dIgnore whitespace in VCS diffs")
   String gitDiffIgnoreWhitespaceTitle();
   @DefaultStringValue("@dWhether to ignore whitespace when generating diffs of version controlled files.")
   String gitDiffIgnoreWhitespaceDescription();

   /**
    * Whether double-clicking should select a word in the Console pane.
    */
   @DefaultStringValue("@dDouble click to select in the Console")
   String consoleDoubleClickSelectTitle();
   @DefaultStringValue("@dWhether double-clicking should select a word in the Console pane.")
   String consoleDoubleClickSelectDescription();

   /**
    * Whether a git repo should be initialized inside new projects by default.
    */
   @DefaultStringValue("@dCreate a Git repo in new projects")
   String newProjGitInitTitle();
   @DefaultStringValue("@dWhether a git repo should be initialized inside new projects by default.")
   String newProjGitInitDescription();

   /**
    * The root document to use when compiling PDF documents.
    */
   @DefaultStringValue("@dRoot document for PDF compilation")
   String rootDocumentTitle();
   @DefaultStringValue("@dThe root document to use when compiling PDF documents.")
   String rootDocumentDescription();

   /**
    * When to show the server home page in RStudio Workbench.
    */
   @DefaultStringValue("@dShow user home page in RStudio Workbench")
   String showUserHomePageTitle();
   @DefaultStringValue("@dWhen to show the server home page in RStudio Workbench.")
   String showUserHomePageDescription();

   /**
    * Whether to reuse sessions when opening projects in RStudio Workbench.
    */
   @DefaultStringValue("@d")
   String reuseSessionsForProjectLinksTitle();
   @DefaultStringValue("@dWhether to reuse sessions when opening projects in RStudio Workbench.")
   String reuseSessionsForProjectLinksDescription();

   /**
    * Whether to enable RStudio's version control system interface.
    */
   @DefaultStringValue("@dEnable version control if available")
   String vcsEnabledTitle();
   @DefaultStringValue("@dWhether to enable RStudio's version control system interface.")
   String vcsEnabledDescription();

   /**
    * Automatically refresh VCS status?
    */
   @DefaultStringValue("@dAuto-refresh state from version control")
   String vcsAutorefreshTitle();
   @DefaultStringValue("@dAutomatically refresh VCS status?")
   String vcsAutorefreshDescription();

   /**
    * The path to the Git executable to use.
    */
   @DefaultStringValue("@dPath to Git executable")
   String gitExePathTitle();
   @DefaultStringValue("@dThe path to the Git executable to use.")
   String gitExePathDescription();

   /**
    * The path to the Subversion executable to use.
    */
   @DefaultStringValue("@dPath to Subversion executable")
   String svnExePathTitle();
   @DefaultStringValue("@dThe path to the Subversion executable to use.")
   String svnExePathDescription();

   /**
    * The path to the terminal executable to use.
    */
   @DefaultStringValue("@d")
   String terminalPathTitle();
   @DefaultStringValue("@dThe path to the terminal executable to use.")
   String terminalPathDescription();

   /**
    * The path to the RSA key file to use.
    */
   @DefaultStringValue("@d")
   String rsaKeyPathTitle();
   @DefaultStringValue("@dThe path to the RSA key file to use.")
   String rsaKeyPathDescription();

   /**
    * Whether to use the devtools R package.
    */
   @DefaultStringValue("@dUse the devtools R package if available")
   String useDevtoolsTitle();
   @DefaultStringValue("@dWhether to use the devtools R package.")
   String useDevtoolsDescription();

   /**
    * Whether to use Internet2 for networking on R for Windows.
    */
   @DefaultStringValue("@d")
   String useInternet2Title();
   @DefaultStringValue("@dWhether to use Internet2 for networking on R for Windows.")
   String useInternet2Description();

   /**
    * Whether to use secure downloads when fetching R packages.
    */
   @DefaultStringValue("@dDownload R packages securely")
   String useSecureDownloadTitle();
   @DefaultStringValue("@dWhether to use secure downloads when fetching R packages.")
   String useSecureDownloadDescription();

   /**
    * Whether to clean up temporary files after running R CMD CHECK.
    */
   @DefaultStringValue("@dClean up temporary files after R CMD CHECK")
   String cleanupAfterRCmdCheckTitle();
   @DefaultStringValue("@dWhether to clean up temporary files after running R CMD CHECK.")
   String cleanupAfterRCmdCheckDescription();

   /**
    * Whether to view the directory after running R CMD CHECK.
    */
   @DefaultStringValue("@dView directory after R CMD CHECK")
   String viewDirAfterRCmdCheckTitle();
   @DefaultStringValue("@dWhether to view the directory after running R CMD CHECK.")
   String viewDirAfterRCmdCheckDescription();

   /**
    * Whether to hide object files in the Files pane.
    */
   @DefaultStringValue("@dHide object files in the Files pane")
   String hideObjectFilesTitle();
   @DefaultStringValue("@dWhether to hide object files in the Files pane.")
   String hideObjectFilesDescription();

   /**
    * Whether to restore the last project when starting RStudio.
    */
   @DefaultStringValue("@dRestore last project when starting RStudio")
   String restoreLastProjectTitle();
   @DefaultStringValue("@dWhether to restore the last project when starting RStudio.")
   String restoreLastProjectDescription();

   /**
    * The number of seconds after which a project is deemed to have successfully started.
    */
   @DefaultStringValue("@dNumber of seconds for safe project startup")
   String projectSafeStartupSecondsTitle();
   @DefaultStringValue("@dThe number of seconds after which a project is deemed to have successfully started.")
   String projectSafeStartupSecondsDescription();

   /**
    * Use tinytex to compile .tex files.
    */
   @DefaultStringValue("@dUse tinytex to compile .tex files")
   String useTinytexTitle();
   @DefaultStringValue("@dUse tinytex to compile .tex files.")
   String useTinytexDescription();

   /**
    * Whether to clean output after running Texi2Dvi.
    */
   @DefaultStringValue("@dClean output after running Texi2Dvi")
   String cleanTexi2dviOutputTitle();
   @DefaultStringValue("@dWhether to clean output after running Texi2Dvi.")
   String cleanTexi2dviOutputDescription();

   /**
    * Whether to enable shell escaping with LaTeX documents.
    */
   @DefaultStringValue("@dShell escape LaTeX documents")
   String latexShellEscapeTitle();
   @DefaultStringValue("@dWhether to enable shell escaping with LaTeX documents.")
   String latexShellEscapeDescription();

   /**
    * Whether to restore the last version of R used by the project in RStudio Pro and RStudio Workbench.
    */
   @DefaultStringValue("@dRestore project R version in RStudio Pro and RStudio Workbench")
   String restoreProjectRVersionTitle();
   @DefaultStringValue("@dWhether to restore the last version of R used by the project in RStudio Pro and RStudio Workbench.")
   String restoreProjectRVersionDescription();

   /**
    * The verbosity level to use with Clang (0 - 2)
    */
   @DefaultStringValue("@dClang verbosity level (0 - 2)")
   String clangVerboseTitle();
   @DefaultStringValue("@dThe verbosity level to use with Clang (0 - 2)")
   String clangVerboseDescription();

   /**
    * Whether to automatically submit crash reports to RStudio.
    */
   @DefaultStringValue("@dSubmit crash reports to RStudio")
   String submitCrashReportsTitle();
   @DefaultStringValue("@dWhether to automatically submit crash reports to RStudio.")
   String submitCrashReportsDescription();

   /**
    * The R version to use by default.
    */
   @DefaultStringValue("@d")
   String defaultRVersionTitle();
   @DefaultStringValue("@dThe R version to use by default.")
   String defaultRVersionDescription();

   /**
    * The maximum number of columns to show at once in the data viewer.
    */
   @DefaultStringValue("@dMaximum number of columns in data viewer")
   String dataViewerMaxColumnsTitle();
   @DefaultStringValue("@dThe maximum number of columns to show at once in the data viewer.")
   String dataViewerMaxColumnsDescription();

   /**
    * Support accessibility aids such as screen readers (RStudio Server).
    */
   @DefaultStringValue("@dEnable support for screen readers in RStudio Server")
   String enableScreenReaderTitle();
   @DefaultStringValue("@dSupport accessibility aids such as screen readers (RStudio Server).")
   String enableScreenReaderDescription();

   /**
    * Number of milliseconds to wait after last keystroke before updating live region.
    */
   @DefaultStringValue("@dSeconds to wait before updating ARIA live region")
   String typingStatusDelayMsTitle();
   @DefaultStringValue("@dNumber of milliseconds to wait after last keystroke before updating live region.")
   String typingStatusDelayMsDescription();

   /**
    * Reduce use of animations in the user interface.
    */
   @DefaultStringValue("@dReduced animation/motion mode")
   String reducedMotionTitle();
   @DefaultStringValue("@dReduce use of animations in the user interface.")
   String reducedMotionDescription();

   /**
    * Tab key moves focus out of text editing controls instead of inserting tabs.
    */
   @DefaultStringValue("@dTab key always moves focus")
   String tabKeyMoveFocusTitle();
   @DefaultStringValue("@dTab key moves focus out of text editing controls instead of inserting tabs.")
   String tabKeyMoveFocusDescription();

   /**
    * In source editor find panel, tab key moves focus directly from find text to replace text.
    */
   @DefaultStringValue("@dTab key moves focus directly from find text to replace text in find panel")
   String findPanelLegacyTabSequenceTitle();
   @DefaultStringValue("@dIn source editor find panel, tab key moves focus directly from find text to replace text.")
   String findPanelLegacyTabSequenceDescription();

   /**
    * Control with keyboard focus displays a visual focus indicator.
    */
   @DefaultStringValue("@dAlways show focus outlines")
   String showFocusRectanglesTitle();
   @DefaultStringValue("@dControl with keyboard focus displays a visual focus indicator.")
   String showFocusRectanglesDescription();

   /**
    * Show which panel contains keyboard focus.
    */
   @DefaultStringValue("@dShow focus outline around focused panel")
   String showPanelFocusRectangleTitle();
   @DefaultStringValue("@dShow which panel contains keyboard focus.")
   String showPanelFocusRectangleDescription();

   /**
    * How to deal with changes to documents on idle.
    */
   @DefaultStringValue("@dAutosave mode on idle")
   String autoSaveOnIdleTitle();
   @DefaultStringValue("@dHow to deal with changes to documents on idle.")
   String autoSaveOnIdleDescription();
   @DefaultStringValue("@dSave and write changes")
   String autoSaveOnIdleEnum_commit();
   @DefaultStringValue("@dBackup unsaved changes")
   String autoSaveOnIdleEnum_backup();
   @DefaultStringValue("@dDo nothing")
   String autoSaveOnIdleEnum_none();

   /**
    * The idle period, in milliseconds, after which documents should be auto-saved.
    */
   @DefaultStringValue("@dIdle period for document autosave (ms)")
   String autoSaveIdleMsTitle();
   @DefaultStringValue("@dThe idle period, in milliseconds, after which documents should be auto-saved.")
   String autoSaveIdleMsDescription();

   /**
    * Whether to automatically save when the editor loses focus.
    */
   @DefaultStringValue("@dSave documents when editor loses input focus")
   String autoSaveOnBlurTitle();
   @DefaultStringValue("@dWhether to automatically save when the editor loses focus.")
   String autoSaveOnBlurDescription();

   /**
    * Initial directory for new terminals.
    */
   @DefaultStringValue("@dInitial working directory for new terminals")
   String terminalInitialDirectoryTitle();
   @DefaultStringValue("@dInitial directory for new terminals.")
   String terminalInitialDirectoryDescription();

   /**
    * Whether to show the full path to project in desktop window title.
    */
   @DefaultStringValue("@dShow full path to project in RStudio Desktop windows")
   String fullProjectPathInWindowTitleTitle();
   @DefaultStringValue("@dWhether to show the full path to project in desktop window title.")
   String fullProjectPathInWindowTitleDescription();

   /**
    * Whether to enable visual editing by default for new markdown documents
    */
   @DefaultStringValue("@dUse visual editing by default for new markdown documents")
   String visualMarkdownEditingIsDefaultTitle();
   @DefaultStringValue("@dWhether to enable visual editing by default for new markdown documents")
   String visualMarkdownEditingIsDefaultDescription();

   /**
    * Default spacing for lists created in the visual editor
    */
   @DefaultStringValue("@dDefault list spacing in visual markdown editing mode")
   String visualMarkdownEditingListSpacingTitle();
   @DefaultStringValue("@dDefault spacing for lists created in the visual editor")
   String visualMarkdownEditingListSpacingDescription();

   /**
    * Whether to automatically wrap text when writing markdown
    */
   @DefaultStringValue("@dWrap text in visual markdown editing mode")
   String visualMarkdownEditingWrapTitle();
   @DefaultStringValue("@dWhether to automatically wrap text when writing markdown")
   String visualMarkdownEditingWrapDescription();

   /**
    * The column to wrap text at when writing markdown
    */
   @DefaultStringValue("@dWrap column for visual markdown editing mode")
   String visualMarkdownEditingWrapAtColumnTitle();
   @DefaultStringValue("@dThe column to wrap text at when writing markdown")
   String visualMarkdownEditingWrapAtColumnDescription();

   /**
    * Placement of footnotes within markdown output.
    */
   @DefaultStringValue("@dPlace visual markdown footnotes in")
   String visualMarkdownEditingReferencesLocationTitle();
   @DefaultStringValue("@dPlacement of footnotes within markdown output.")
   String visualMarkdownEditingReferencesLocationDescription();

   /**
    * Whether to write canonical visual mode markdown when saving from source mode.
    */
   @DefaultStringValue("@dWrite canonical visual mode markdown in source mode")
   String visualMarkdownEditingCanonicalTitle();
   @DefaultStringValue("@dWhether to write canonical visual mode markdown when saving from source mode.")
   String visualMarkdownEditingCanonicalDescription();

   /**
    * Maximum content width for visual editing mode, in pixels
    */
   @DefaultStringValue("@dMax content width for visual markdown editor (px)")
   String visualMarkdownEditingMaxContentWidthTitle();
   @DefaultStringValue("@dMaximum content width for visual editing mode, in pixels")
   String visualMarkdownEditingMaxContentWidthDescription();

   /**
    * Whether to show the document outline by default when opening R Markdown documents in visual mode.
    */
   @DefaultStringValue("@dShow document outline in visual markdown editing mode")
   String visualMarkdownEditingShowDocOutlineTitle();
   @DefaultStringValue("@dWhether to show the document outline by default when opening R Markdown documents in visual mode.")
   String visualMarkdownEditingShowDocOutlineDescription();

   /**
    * Whether to show the margin guide in the visual mode code blocks.
    */
   @DefaultStringValue("@dShow margin in visual mode code blocks")
   String visualMarkdownEditingShowMarginTitle();
   @DefaultStringValue("@dWhether to show the margin guide in the visual mode code blocks.")
   String visualMarkdownEditingShowMarginDescription();

   /**
    * The default visual editing mode font size, in points
    */
   @DefaultStringValue("@dFont size for visual editing mode")
   String visualMarkdownEditingFontSizePointsTitle();
   @DefaultStringValue("@dThe default visual editing mode font size, in points")
   String visualMarkdownEditingFontSizePointsDescription();

   /**
    * The name of the editor to use to provide code editing in visual mode
    */
   @DefaultStringValue("@dEditor for code chunks in visual editing mode")
   String visualMarkdownCodeEditorTitle();
   @DefaultStringValue("@dThe name of the editor to use to provide code editing in visual mode")
   String visualMarkdownCodeEditorDescription();

   /**
    * Zotero libraries to insert citations from.
    */
   @DefaultStringValue("@dZotero libraries")
   String zoteroLibrariesTitle();
   @DefaultStringValue("@dZotero libraries to insert citations from.")
   String zoteroLibrariesDescription();

   /**
    * Preferred emoji skintone
    */
   @DefaultStringValue("@d")
   String emojiSkintoneTitle();
   @DefaultStringValue("@dPreferred emoji skintone")
   String emojiSkintoneDescription();

   /**
    * List of aria-live announcements to disable.
    */
   @DefaultStringValue("@dDisabled aria-live announcements")
   String disabledAriaLiveAnnouncementsTitle();
   @DefaultStringValue("@dList of aria-live announcements to disable.")
   String disabledAriaLiveAnnouncementsDescription();

   /**
    * Maximum number of lines of console output announced after a command.
    */
   @DefaultStringValue("@dMaximum number of console lines to announce")
   String screenreaderConsoleAnnounceLimitTitle();
   @DefaultStringValue("@dMaximum number of lines of console output announced after a command.")
   String screenreaderConsoleAnnounceLimitDescription();

   /**
    * List of path components; file monitor will ignore paths containing one or more of these components.
    */
   @DefaultStringValue("@dList of path components ignored by file monitor")
   String fileMonitorIgnoredComponentsTitle();
   @DefaultStringValue("@dList of path components; file monitor will ignore paths containing one or more of these components.")
   String fileMonitorIgnoredComponentsDescription();

   /**
    * Whether to install R package dependencies one at a time.
    */
   @DefaultStringValue("@dInstall R package dependencies one at a time")
   String installPkgDepsIndividuallyTitle();
   @DefaultStringValue("@dWhether to install R package dependencies one at a time.")
   String installPkgDepsIndividuallyDescription();

   /**
    * R graphics backend.
    */
   @DefaultStringValue("@dR graphics backend")
   String graphicsBackendTitle();
   @DefaultStringValue("@dR graphics backend.")
   String graphicsBackendDescription();

   /**
    * Type of anti-aliasing to be used for generated R plots.
    */
   @DefaultStringValue("@dR graphics antialiasing method")
   String graphicsAntialiasingTitle();
   @DefaultStringValue("@dType of anti-aliasing to be used for generated R plots.")
   String graphicsAntialiasingDescription();

   /**
    * List of fixed-width fonts to check for browser support.
    */
   @DefaultStringValue("@dFixed-width font list for RStudio Server")
   String browserFixedWidthFontsTitle();
   @DefaultStringValue("@dList of fixed-width fonts to check for browser support.")
   String browserFixedWidthFontsDescription();

   /**
    * The Python type.
    */
   @DefaultStringValue("@d")
   String pythonTypeTitle();
   @DefaultStringValue("@dThe Python type.")
   String pythonTypeDescription();

   /**
    * The Python version.
    */
   @DefaultStringValue("@d")
   String pythonVersionTitle();
   @DefaultStringValue("@dThe Python version.")
   String pythonVersionDescription();

   /**
    * The path to the default Python interpreter.
    */
   @DefaultStringValue("@d")
   String pythonPathTitle();
   @DefaultStringValue("@dThe path to the default Python interpreter.")
   String pythonPathDescription();

   /**
    * The maximum amount of seconds of retry for save operations.
    */
   @DefaultStringValue("@dSave Retry Timeout")
   String saveRetryTimeoutTitle();
   @DefaultStringValue("@dThe maximum amount of seconds of retry for save operations.")
   String saveRetryTimeoutDescription();

   /**
    * Whether the Insert Pipe Operator command should insert the native R pipe operator, |>
    */
   @DefaultStringValue("@dUse R's native pipe operator, |>")
   String insertNativePipeOperatorTitle();
   @DefaultStringValue("@dWhether the Insert Pipe Operator command should insert the native R pipe operator, |>")
   String insertNativePipeOperatorDescription();

   /**
    * Whether to keep track of recently used commands in the Command Palette
    */
   @DefaultStringValue("@dRemember recently used items in Command Palette")
   String commandPaletteMruTitle();
   @DefaultStringValue("@dWhether to keep track of recently used commands in the Command Palette")
   String commandPaletteMruDescription();

   /**
    * Whether to compute and show memory usage in the Environment Pane
    */
   @DefaultStringValue("@dShow memory usage in Environment Pane")
   String showMemoryUsageTitle();
   @DefaultStringValue("@dWhether to compute and show memory usage in the Environment Pane")
   String showMemoryUsageDescription();

   /**
    * How many seconds to wait between automatic requeries of memory statistics (0 to disable)
    */
   @DefaultStringValue("@dInterval for requerying memory stats (seconds)")
   String memoryQueryIntervalSecondsTitle();
   @DefaultStringValue("@dHow many seconds to wait between automatic requeries of memory statistics (0 to disable)")
   String memoryQueryIntervalSecondsDescription();

   @DefaultStringValue("Choose Encoding")
   String chooseEncodingDialogCaption();
   @DefaultStringValue("Show all encodings")
   String showAllEncodings();
   @DefaultStringValue("Set as default encoding for source files")
   String saveAsDefaultLabel();
   @DefaultStringValue("OK")
   String okButton();
   @DefaultStringValue("Apply")
   String applyButton();
   @DefaultStringValue("Line ending conversion:")
   String lineEndingsSelectWidgetLabel();
   @DefaultStringValue("(Use Default)")
   String useDefaultOption();
   @DefaultStringValue("None")
   String noneOption();
   @DefaultStringValue("Platform Native")
   String platformNativeOption();
   @DefaultStringValue("Posix (LF)")
   String posixOption();
   @DefaultStringValue("Windows (CR/LF)")
   String windowsOption();
   @DefaultStringValue("Using Code Diagnostics")
   String codeDiagnosticsLabel();
}
